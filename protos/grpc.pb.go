// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/grpc.proto

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message
type PeerRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeerRequest) Reset()         { *m = PeerRequest{} }
func (m *PeerRequest) String() string { return proto.CompactTextString(m) }
func (*PeerRequest) ProtoMessage()    {}
func (*PeerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_grpc_03da7a2cb110090f, []int{0}
}
func (m *PeerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeerRequest.Unmarshal(m, b)
}
func (m *PeerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeerRequest.Marshal(b, m, deterministic)
}
func (dst *PeerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerRequest.Merge(dst, src)
}
func (m *PeerRequest) XXX_Size() int {
	return xxx_messageInfo_PeerRequest.Size(m)
}
func (m *PeerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PeerRequest proto.InternalMessageInfo

func (m *PeerRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The response message containing the connection message
type PeerReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeerReply) Reset()         { *m = PeerReply{} }
func (m *PeerReply) String() string { return proto.CompactTextString(m) }
func (*PeerReply) ProtoMessage()    {}
func (*PeerReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_grpc_03da7a2cb110090f, []int{1}
}
func (m *PeerReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeerReply.Unmarshal(m, b)
}
func (m *PeerReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeerReply.Marshal(b, m, deterministic)
}
func (dst *PeerReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerReply.Merge(dst, src)
}
func (m *PeerReply) XXX_Size() int {
	return xxx_messageInfo_PeerReply.Size(m)
}
func (m *PeerReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerReply.DiscardUnknown(m)
}

var xxx_messageInfo_PeerReply proto.InternalMessageInfo

func (m *PeerReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*PeerRequest)(nil), "protos.PeerRequest")
	proto.RegisterType((*PeerReply)(nil), "protos.PeerReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PeerClient is the client API for Peer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PeerClient interface {
	// Sends a connection message
	ConnectPeer(ctx context.Context, in *PeerRequest, opts ...grpc.CallOption) (*PeerReply, error)
}

type peerClient struct {
	cc *grpc.ClientConn
}

func NewPeerClient(cc *grpc.ClientConn) PeerClient {
	return &peerClient{cc}
}

func (c *peerClient) ConnectPeer(ctx context.Context, in *PeerRequest, opts ...grpc.CallOption) (*PeerReply, error) {
	out := new(PeerReply)
	err := c.cc.Invoke(ctx, "/protos.Peer/ConnectPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PeerServer is the server API for Peer service.
type PeerServer interface {
	// Sends a connection message
	ConnectPeer(context.Context, *PeerRequest) (*PeerReply, error)
}

func RegisterPeerServer(s *grpc.Server, srv PeerServer) {
	s.RegisterService(&_Peer_serviceDesc, srv)
}

func _Peer_ConnectPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServer).ConnectPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Peer/ConnectPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServer).ConnectPeer(ctx, req.(*PeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Peer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Peer",
	HandlerType: (*PeerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConnectPeer",
			Handler:    _Peer_ConnectPeer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/grpc.proto",
}

func init() { proto.RegisterFile("protos/grpc.proto", fileDescriptor_grpc_03da7a2cb110090f) }

var fileDescriptor_grpc_03da7a2cb110090f = []byte{
	// 138 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0x28, 0xca, 0x2f,
	0xc9, 0x2f, 0xd6, 0x4f, 0x2f, 0x2a, 0x48, 0xd6, 0x03, 0xb3, 0x85, 0xd8, 0x20, 0x42, 0x4a, 0x8a,
	0x5c, 0xdc, 0x01, 0xa9, 0xa9, 0x45, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x42, 0x5c,
	0x2c, 0x79, 0x89, 0xb9, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x60, 0xb6, 0x92, 0x2a,
	0x17, 0x27, 0x44, 0x49, 0x41, 0x4e, 0xa5, 0x90, 0x04, 0x17, 0x7b, 0x6e, 0x6a, 0x71, 0x71, 0x62,
	0x3a, 0x4c, 0x0d, 0x8c, 0x6b, 0x64, 0xcf, 0xc5, 0x02, 0x52, 0x26, 0x64, 0xce, 0xc5, 0xed, 0x9c,
	0x9f, 0x97, 0x97, 0x9a, 0x5c, 0x02, 0xe6, 0x0a, 0x43, 0x2c, 0x2c, 0xd6, 0x43, 0xb2, 0x46, 0x4a,
	0x10, 0x55, 0xb0, 0x20, 0xa7, 0x52, 0x89, 0x21, 0x09, 0xe2, 0x24, 0x63, 0x40, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x60, 0x4c, 0xdc, 0x5d, 0xae, 0x00, 0x00, 0x00,
}
